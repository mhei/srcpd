dnl configure.in for srcpd
dnl Revision: $Revision$
dnl Last update: $Date$

dnl Process this file with autoconf to produce a configure script.

AC_INIT([srcpd], [2.0.13], [srcpd-devel@lists.sourceforge.net])
AC_CANONICAL_HOST
AC_CONFIG_HEADER([src/config.h])
AC_CONFIG_SRCDIR([src/srcpd.c])

AM_INIT_AUTOMAKE([dist-bzip2])

AC_PREFIX_DEFAULT(/usr/local)

dnl this is from scmxx
AH_TEMPLATE(
    [NO_CFMAKERAW],
    [define this to include own cfmakeraw()]
)
AC_CHECK_FUNC(
    cfmakeraw,
    [],
    [AC_DEFINE(NO_CFMAKERAW)]
)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL


dnl Option to disable Loconet support
AC_ARG_ENABLE(loconet,
    [  --disable-loconet       do not compile Loconet module],
    [with_LOCONET="$enableval"], [with_LOCONET=yes])
test "$with_LOCONET" = "yes" && AC_DEFINE(USE_LOCONET,1,
                                    [define to 1 if you want Loconet support])
AM_CONDITIONAL(USE_LOCONET, test "$with_LOCONET" = yes)

dnl Option to disable DDL support
AC_ARG_ENABLE(ddl,
    [  --disable-ddl       do not compile ddl module],
    [with_DLL="$enableval"], [with_DDL=yes])
test "$with_DDL" = "yes" && AC_DEFINE(USE_DDL,1,
                                    [define to 1 if you want DDL support])
AM_CONDITIONAL(USE_DDL, test "$with_DDL" = yes)

dnl Option to disable DDL S88 support
AC_ARG_ENABLE(ddl88,
    [  --disable-ddl88       do not compile ddl S88 module],
    [with_DLL88="$enableval"], [with_DDL88=yes])
test "$with_DDL88" = "yes" && AC_DEFINE(USE_DDL88,1,
                                    [define to 1 if you want DDL S88 support])
AM_CONDITIONAL(USE_DDL88, test "$with_DDL88" = yes)

dnl Option to disable HSI S88 support
AC_ARG_ENABLE(hsi88,
    [  --disable-hsi88       do not compile HSI S88 module],
    [with_HSI88="$enableval"], [with_HSI88=yes])
test "$with_HSI88" = "yes" && AC_DEFINE(USE_HSI88,1,
                                    [define to 1 if you want HSI S88 support])
AM_CONDITIONAL(USE_HSI88, test "$with_HSI88" = yes)

dnl Option to disable LENZ support
AC_ARG_ENABLE(lenz,
    [  --disable-lenz       do not compile LENZ module],
    [with_LENZ="$enableval"], [with_LENZ=yes])
test "$with_LENZ" = "yes" && AC_DEFINE(USE_LENZ,1,
                                    [define to 1 if you want LENZ support])
AM_CONDITIONAL(USE_LENZ, test "$with_LENZ" = yes)

dnl Option to disable Intellibox support
AC_ARG_ENABLE(ib,
    [  --disable-ib        do not compile Intellibox module],
    [with_IB="$enableval"], [with_IB=yes])
test "$with_IB" = "yes" && AC_DEFINE(USE_IB,1,
                                    [define to 1 if you want Intellibox support])
AM_CONDITIONAL(USE_IB, test "$with_IB" = yes)

dnl Option to disable SELECTRIX support
AC_ARG_ENABLE(selectrix,
    [  --disable-selectrix       do not compile SELECTRIX module],
    [with_SELECTRIX="$enableval"], [with_SELECTRIX=yes])
test "$with_SELECTRIX" = "yes" && AC_DEFINE(USE_SELECTRIX,1,
                                    [define to 1 if you want SELECTRIX support])
AM_CONDITIONAL(USE_SELECTRIX, test "$with_SELECTRIX" = yes)

dnl Option to disable M605X support
AC_ARG_ENABLE(m605x,
    [  --disable-m605x       do not compile M605x module],
    [with_M605X="$enableval"], [with_M605X=yes])
test "$with_M605X" = "yes" && AC_DEFINE(USE_M605X,1,
                                    [define to 1 if you want M605X support])
AM_CONDITIONAL(USE_M605X, test "$with_M605X" = yes)

dnl Option to disable Zimo support
AC_ARG_ENABLE(zimo,
    [  --disable-zimo       do not compile ZIMO module],
    [with_ZIMO="$enableval"], [with_ZIMO=yes])
test "$with_ZIMO" = "yes" && AC_DEFINE(USE_ZIMO,1,
                                    [define to 1 if you want ZIMO support])
AM_CONDITIONAL(USE_ZIMO, test "$with_ZIMO" = yes)

dnl Option to disable I2C support
AC_ARG_ENABLE(i2c,
    [  --disable-i2c       do not compile I2c module],
    [with_I2C="$enableval"], [with_I2C=yes])
test "$with_I2C" = "yes" && AC_DEFINE(USE_I2C,1,
                                    [define to 1 if you want I2C support])
AM_CONDITIONAL(USE_I2C, test "$with_I2C" = yes)


dnl test for getaddrinfo, not available under Cygwin but necessary for Loconet
if test "$with_LOCONET" = "yes"; then
    AC_SEARCH_LIBS(getaddrinfo, inet6,
        [AC_DEFINE(HAVE_GETADDRINFO,1,
            [define to 1 if you have the getaddrinfo function])],
        [AC_MSG_ERROR(getaddrinfo support missing)])
fi


dnl Checks for host dependend libraries.
case $host in
  *-*-linux*)
    ;;
  *-*-cygwin*)
    AC_CHECK_LIB(ioperm, ioperm, , AC_MSG_ERROR(lib ioperm is missing))
    ;;
  *-*-freebsd*)
    ;;
  *)
    AC_MSG_WARN(System $host not known.)
    ;;
esac


dnl Checks for header files.
AC_CHECK_HEADERS(fcntl.h syslog.h errno.h pthread.h pwd.h sys/time.h \
                 signal.h termios.h netdb.h, ,
                 AC_MSG_ERROR(essential header file is missing))

AC_SYS_POSIX_TERMIOS
if test "x$ac_cv_sys_posix_termios" = "xno"; then
    AC_MSG_ERROR(No POSIX termios on this system)
fi

dnl Checks for host dependend header files.
case $host in
  *-*-linux*)
    AC_CHECK_HEADERS(sys/io.h linux/serial.h \
                     linux/i2c.h linux/i2c-dev.h, ,
                 AC_MSG_ERROR(essential header file is missing))
    ;;
  *-*-cygwin*)
    AC_CHECK_HEADERS(sys/io.h, ,
                 AC_MSG_ERROR(essential header file is missing))
    ;;
  *-*-freebsd*)
    AC_CHECK_HEADERS(dev/ppbus/ppi.h, ,
                 AC_MSG_ERROR(essential header file is missing))
    ;;
  *-*-sunos*) 
    AC_CHECK_HEADERS(sys/fileo.h,,
                 AC_MSG_ERROR(essential header file is missing))
    ;;
  *)
    ;;
esac

dnl Check for types possibly not defined in header files.
AC_TYPE_PID_T
AC_TYPE_SIGNAL

dnl Checks for structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE

AC_MSG_CHECKING([for type of build])
AC_ARG_ENABLE(debug,
        AC_HELP_STRING([--enable-debug], [enable debug mode [default=no]]),
 enable_debug=$enableval, enable_debug=no)
if test "x$enable_debug" = "xyes"; then
   CFLAGS="$CFLAGS -g -Wall -Wextra -DDEBUG"
   AC_MSG_RESULT(debug)
else
   if test "x$CFLAGS" = "x"; then
      CFLAGS="-O2 -Wall -Wextra"
   fi
   AC_MSG_RESULT(release)
fi

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_CHECK_FUNCS(gettimeofday socket)

AM_PATH_XML2([2.4.0],
             [CPPFLAGS="$XML_CPPFLAGS $CPPFLAGS" LIBS="$XML_LIBS $LIBS"],
             AC_MSG_ERROR(no matching library found))

ACX_PTHREAD([LIBS="$PTHREAD_LIBS $LIBS"
             CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
             CC="$PTHREAD_CC"],
             AC_MSG_ERROR(threads library not found))

dnl Checks for host dependend library functions.
case $host in
  *-*-linux*)
    AC_CHECK_FUNC(ioperm, , AC_MSG_ERROR(support missing))
    ;;
  *-*-cygwin*)
    AC_CHECK_FUNC(ioperm, , AC_MSG_ERROR(support missing))
    ;;
  *-*-freebsd*)
    ;;
  *)
    ;;
esac

AC_MSG_CHECKING([whether to enable ipv6])
AC_ARG_ENABLE(ipv6,
        AC_HELP_STRING([--enable-ipv6], [enable IPv6 extensions]),
[ case "$enableval" in
        no)
                AC_MSG_RESULT(no)
                ipv6=no
                ;;
        *)
                AC_MSG_RESULT(yes)
                AC_DEFINE(ENABLE_IPV6, [1], [Activate IP V6])
                ipv6=yes
                ;;
  esac ],
AC_TRY_RUN([ /* AF_INET6 available check */
#include <sys/types.h>
#include <sys/socket.h>
main()
{
 if (socket(AF_INET6, SOCK_STREAM, 0) < 0)
   exit(1);
 else
   exit(0);
}
],
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_IPV6, [1], [Activate IP V6])
  ipv6=yes,
  AC_MSG_RESULT(no)
  ipv6=no,
  AC_MSG_RESULT(no)
  ipv6=no
))

AC_CONFIG_FILES(Makefile src/Makefile man/Makefile man/de/Makefile)
AC_OUTPUT
